# -*- coding: utf-8 -*-
"""Copy of Copy of Copy of Copy of Copy of Copy of A Review of liver patient analysis.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1oOmyDAFDAGmUqVJV05Avj7IIYXR47KTE
"""





import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import pickle

from google.colab import files
uploaded =files.upload()

data = pd.read_csv('indian_liver_patient.csv')

data.head()

data.tail()

data.describe()

data.info()

data.isnull().any()

data.isnull().sum()



data[data['Dataset']==1]

data['Dataset'].unique()

data.isnull().sum()

data_1 = data.dropna()

data_1.isnull().sum()



plt.figure(figsize=(15,10))
plt.subplot(3,3,1)
plt.scatter(data_1['Age'], data_1['Dataset'])
plt.ylabel('Dataset')
plt.xlabel('Age')


plt.subplot(3,3,2)
plt.scatter(data_1['Gender'], data_1['Dataset'],)
plt.ylabel('Dataset')
plt.xlabel('Gender')

plt.subplot(3,3,3)
plt.scatter(data_1['Total_Bilirubin'], data_1['Dataset'],)
plt.ylabel('Dataset')
plt.xlabel('Total_Bilirubin')


plt.subplot(3,3,4)
plt.scatter(data_1['Direct_Bilirubin'], data_1['Dataset'],)
plt.ylabel('Dataset')
plt.xlabel('Direct_Bilirubin')

plt.subplot(3,3,5)
plt.scatter(data_1['Alkaline_Phosphotase'], data_1['Dataset'],)
plt.ylabel('Dataset')
plt.xlabel('Alkaline_Phosphotase')

plt.subplot(3,3,6)
plt.scatter(data_1['Alamine_Aminotransferase'], data_1['Dataset'],)
plt.ylabel('Dataset')
plt.xlabel('Alamine_Aminotransferase')

plt.subplot(3,3,7)
plt.scatter(data_1['Aspartate_Aminotransferase'], data_1['Dataset'],)
plt.ylabel('Dataset')
plt.xlabel('Aspartate_Aminotransferase')

plt.subplot(3,3,8)
plt.scatter(data_1['Total_Protiens'], data_1['Dataset'],)
plt.ylabel('Dataset')
plt.xlabel('Total_Protiens')

plt.subplot(3,3,9)
plt.scatter(data_1['Albumin_and_Globulin_Ratio'], data_1['Dataset'],)
plt.ylabel('Dataset')
plt.xlabel('Albumin_and_Globulin_Ratio')

sns.countplot(data=data_1, x = 'Dataset')
LD,NLD=data_1['Dataset'].value_counts()
print("liver disease patients:",LD)
print("Non-liver disease patients:",NLD)

sns.countplot(data=data_1, x = 'Gender', label='Count')
m,f=data_1['Gender'].value_counts()
print("No of Males:",m)
print("No of Females:",f)

# Importing the LabelEncoder library from scikit.learn
from sklearn.preprocessing import LabelEncoder
le=LabelEncoder()
# Converting Textual data into numeric data
data_1['Gender'] = le.fit_transform(data_1['Gender'])
data_1.head()

data['Gender'] = le.fit_transform(data['Gender'])

data_1.head()

x=data_1.iloc[:,0:-1]
y=data_1.iloc[:,-1]

x=data_1.iloc[:,0:1]
y=data_1.iloc[:,-1]

from sklearn.model_selection import train_test_split
xtrain,xtest,ytrain,ytest=train_test_split(x,y,test_size=0.3)

xtrain.shape

xtest.shape

from sklearn.metrics import accuracy_score
from sklearn.metrics import confusion_matrix



from sklearn.svm import SVC
from sklearn.ensemble import RandomForestClassifier
from sklearn.neighbors import KNeighborsClassifier

svc=SVC()
RFmodel=RandomForestClassifier()
KNNmodel=KNeighborsClassifier()



from sklearn.svm import SVC
svm=SVC()

svc.fit(xtrain, ytrain)

SVCpred=svc.predict(xtest)

from sklearn.metrics import accuracy_score,confusion_matrix
# checking for accuracy score from actual data and predicted data
SVCaccuracy=accuracy_score(SVCpred, ytest)
SVCaccuracy

SVCcm=confusion_matrix(SVCpred, ytest)
SVCcm



from sklearn.ensemble import RandomForestClassifier
RFmodel=RandomForestClassifier()

RFmodel.fit(xtrain, ytrain)

RFpred=RFmodel.predict(xtest)

RFaccuracy=accuracy_score(RFpred, ytest)
RFaccuracy

RFcm=confusion_matrix(RFpred, ytest)
RFcm





from sklearn.neighbors import KNeighborsClassifier
KNN = KNeighborsClassifier()

KNN.fit(xtrain, ytrain)

KNNpred=KNN.predict(xtest)

KNNaccuracy=accuracy_score(KNNpred, ytest)
KNNaccuracy

KNNcm=confusion_matrix(KNNpred, ytest)
KNNcm



print("Support Vector Machine Algorithm accuracy score : {value:.2f} %".format(value=SVCaccuracy*100))
print("Random Forest Algorithm accuracy score : {value:.2f} %".format(value=RFaccuracy*100))
print("K=Nearest Neighbors Algorithm accuracy score : {value:.2f} %".format(value=KNNaccuracy*100))

import pickle
pickle.dump(svm, open('liver_analysis_1.pkl', 'wb'))

!pip install nbconvert

!jupyter nbconvert --to html Review_of_liver_patient_analysis.ipynb

!pip install flask-ngrok

from flask import Flask,render_template, request
import numpy as np
import pickle

app=Flask(__name__)

@app.route('/')
def home():
  return render_template('home.html')
  @app.route('/predict')
  def index() :
    return render_template("index.html")

@app.route('/data_predict', methods=['post'])
def predict():
  age = request.form['age']
  gender = request.form['gender']
  tb = request.form['tb']
  db = request.form['db']
  ap = request.form['ap']
  aa1 = request.form['aa1']
  aa2 = request.form['aa2']
  tp = request.form['tp']
  a = request.form['a']
  agr = request.form['agr']


  model = pickle.load(open('liver_analysis_1.pkl', 'rb'))

  prediction= model.predict(data)[0]
  if (prediction == 1):
      return render_template('noChance.html', prediction='you have a liver desease problem, you must and should consult a doctor. Take care')
  else:
      return render_template('chance.html', prediction='you dont have a liver desease problem')

if __name__ == '__main__':
   app.run()